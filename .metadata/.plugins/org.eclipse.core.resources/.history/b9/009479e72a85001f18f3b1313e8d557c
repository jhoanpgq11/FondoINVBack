package com.api.ejemplo.demo.service;

import com.api.ejemplo.demo.exepciones.ModelNotFoundException;
import com.api.ejemplo.demo.model.Cliente;
import com.api.ejemplo.demo.model.Fondo;
import com.api.ejemplo.demo.model.FondoSuscrito;
import com.api.ejemplo.demo.model.Transaccion;
import com.api.ejemplo.demo.repository.ClienteRepository;
import com.api.ejemplo.demo.repository.FondoRepository;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class FondoService {

    private final ClienteRepository clienteRepository;
    private final FondoRepository fondoRepository;
    private final NotificationService notificationService;

    @Autowired
    public FondoService(ClienteRepository clienteRepository, FondoRepository fondoRepository, NotificationService notificationService) {
        this.clienteRepository = clienteRepository;
        this.fondoRepository = fondoRepository;
        this.notificationService = notificationService;
    }

    // Obtener todos los fondos disponibles
    public List<Fondo> obtenerTodosLosFondos() {
        return (List<Fondo>) fondoRepository.findAll();
    }

    // Suscribirse a un fondo
    public String suscribirAFondo(String clienteId, String fondoId) throws Exception {
        Optional<Cliente> clienteOpt = clienteRepository.findById(clienteId);
        Optional<Fondo> fondoOpt = fondoRepository.findById(fondoId);

        if (clienteOpt.isEmpty()) {
            throw new ModelNotFoundException("Cliente no encontrado.");
        }

        if (fondoOpt.isEmpty()) {
            throw new ModelNotFoundException("Fondo no encontrado.");
        }

        Cliente cliente = clienteOpt.get();
        Fondo fondo = fondoOpt.get();

        if (cliente.getSaldoActual() < fondo.getMontoMinimo()) {
            throw new Exception("No tiene saldo disponible para vincularse al fondo " + fondo.getNombreFondo());
        }

        // Actualizar saldo del cliente
        cliente.setSaldoActual(cliente.getSaldoActual() - fondo.getMontoMinimo());
        clienteRepository.save(cliente);

        // Registrar suscripción al fondo
        FondoSuscrito fondoSuscrito = new FondoSuscrito();
        fondoSuscrito.setFondoId(fondo);
        cliente.getFondosSuscritos().add(fondoSuscrito);
        clienteRepository.save(cliente);

        // Registrar la transacción
        Transaccion transaccion = new Transaccion();
        transaccion.setTipo("Suscripción");
        transaccion.setFondoId(fondo);
        transaccion.setMonto(fondo.getMontoMinimo());
        cliente.getHistorialTransacciones().add(transaccion);
        clienteRepository.save(cliente);

        // Enviar notificación al cliente
        notificationService.enviarNotificacion(cliente, "Te has suscrito al fondo " + fondo.getNombreFondo());

        return "Suscripción exitosa al fondo " + fondo.getNombreFondo();
    }

    // Cancelar suscripción a un fondo
    public String cancelarFondo(String clienteId, String fondoId) throws Exception {
        Optional<Cliente> clienteOpt = clienteRepository.findById(clienteId);
        Optional<Fondo> fondoOpt = fondoRepository.findById(fondoId);

        if (clienteOpt.isEmpty()) {
            throw new ModelNotFoundException("Cliente no encontrado.");
        }

        if (fondoOpt.isEmpty()) {
            throw new ModelNotFoundException("Fondo no encontrado.");
        }

        Cliente cliente = clienteOpt.get();
        Fondo fondo = fondoOpt.get();

        FondoSuscrito fondoSuscrito = cliente.getFondosSuscritos()
                .stream()
                .filter(fs -> fs.getFondoId().getId().equals(fondoId))
                .findFirst()
                .orElseThrow(() -> new Exception("El cliente no está suscrito a este fondo."));

        // Cancelar suscripción y actualizar saldo
        cliente.getFondosSuscritos().remove(fondoSuscrito);
        cliente.setSaldoActual(cliente.getSaldoActual() + fondo.getMontoMinimo());
        clienteRepository.save(cliente);

        // Registrar la transacción de cancelación
        Transaccion transaccion = new Transaccion();
        transaccion.setTipo("Cancelación");
        transaccion.setFondoId(fondo);
        transaccion.setMonto(fondo.getMontoMinimo());
        cliente.getHistorialTransacciones().add(transaccion);
        clienteRepository.save(cliente);

        // Enviar notificación al cliente
        notificationService.enviarNotificacion(cliente, "Has cancelado tu suscripción al fondo " + fondo.getNombreFondo());

        return "Cancelación exitosa del fondo " + fondo.getNombreFondo();
    }

    // Obtener historial de transacciones
    public List<String> obtenerHistorialTransacciones(String clienteId) throws Exception {
        Optional<Cliente> clienteOpt = clienteRepository.findById(clienteId);

        if (clienteOpt.isEmpty()) {
            throw new ModelNotFoundException("Cliente no encontrado.");
        }

        Cliente cliente = clienteOpt.get();
        List<String> historial = new ArrayList<>();

        for (Transaccion transaccion : cliente.getHistorialTransacciones()) {
            historial.add("Transacción: " + transaccion.getTipo() + " - Fondo: " + transaccion.getFondoId().getNombreFondo() + " - Monto: " + transaccion.getMonto());
        }

        return historial;
    }

    // Crear un nuevo fondo
    public Fondo crearFondo(String nombreFondo, String descripcion, double montoMinimo) {
        Fondo fondo = new Fondo();
        fondo.setNombreFondo(nombreFondo);
        fondo.setDescripcion(descripcion);
        fondo.setMontoMinimo(montoMinimo);
        return fondoRepository.save(fondo);
    }

    // Obtener un fondo por su ID
    public Optional<Fondo> obtenerFondo(String fondoId) {
        return fondoRepository.findById(fondoId);
    }

    // Buscar un fondo por su nombre
    public Fondo buscarPorNombreFondo(String nombreFondo) {
        return fondoRepository.findByNombreFondo(nombreFondo).orElse(null);
    }

    // Validar si el cliente tiene saldo suficiente para suscribirse a un fondo
    public String validarSaldo(String clienteId, String fondoId) {
        Optional<Cliente> clienteOpt = clienteRepository.findById(clienteId);
        Optional<Fondo> fondoOpt = fondoRepository.findById(fondoId);

        if (clienteOpt.isEmpty()) {
            return "Cliente no encontrado.";
        }

        if (fondoOpt.isEmpty()) {
            return "Fondo no encontrado.";
        }

        Cliente cliente = clienteOpt.get();
        Fondo fondo = fondoOpt.get();

        if (cliente.getSaldoActual() < fondo.getMontoMinimo()) {
            return "No tiene saldo disponible para vincularse al fondo " + fondo.getNombreFondo();
        }

        return "Saldo suficiente para vincularse al fondo " + fondo.getNombreFondo();
    }
}